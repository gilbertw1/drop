use clap::{Arg, App};

pub fn create_drop_cli_app() -> App<'static,'static> {
  App::new("drop")
    .version("0.2.4")
    .author("Bryan G. <bryan@bryan.codes>")
    .about("Screenshot & file upload tool with S3 support - http://github.com/gilbertw1/drop")
    .arg(Arg::with_name("file")
         .value_name("FILE")
         .help("Optional file to upload. If equal to '-' then drop reads from stdin")
         .index(1))
    .arg(Arg::with_name("video")
         .short("v")
         .long("video")
         .help("Record video screencast"))
    .arg(Arg::with_name("screenshot")
         .short("s")
         .long("screenshot")
         .help("Capture screenshot"))
    .arg(Arg::with_name("host")
         .long("host")
         .value_name("HOST")
         .help("Custom host")
         .takes_value(true))
    .arg(Arg::with_name("audio")
         .short("-a")
         .long("audio")
         .value_name("BOOL")
         .help("Audio enabled in screencast")
         .takes_value(true)
         .possible_values(&["true", "false"])
         .default_value("false"))
    .arg(Arg::with_name("video-format")
         .long("video-format")
         .value_name("FORMAT")
         .help("Format to record screencast")
         .possible_values(&["mp4", "gif"])
         .default_value("mp4")
         .takes_value(true))
    .arg(Arg::with_name("unique-length")
         .short("-u")
         .long("unique-length")
         .value_name("LENGTH")
         .help("Length of unique string used to create filenames")
         .takes_value(true))
    .arg(Arg::with_name("filename-strategy")
         .long("filename-strategy")
         .value_name("STRATEGY")
         .help("File upload naming strategy")
         .possible_values(&["exact", "append", "prepend", "replace"])
         .takes_value(true))
    .arg(Arg::with_name("transparent")
         .long("transparent")
         .short("-t")
         .value_name("BOOL")
         .help("Enable transparent selection, compositor is required")
         .takes_value(true))
    .arg(Arg::with_name("filename")
         .long("filename")
         .short("-f")
         .value_name("FILENAME")
         .help("Filename to use for creating resulting file")
         .takes_value(true))
    .arg(Arg::with_name("extension")
         .long("extension")
         .short("-e")
         .value_name("EXTENSION")
         .help("Extension to use when creating a filename")
         .takes_value(true))
    .arg(Arg::with_name("aws-key")
         .long("aws-key")
         .value_name("AWS_KEY")
         .help("AWS access key")
         .takes_value(true))
    .arg(Arg::with_name("aws-secret")
         .long("aws-secret")
         .value_name("AWS_SECRET")
         .help("AWS access secret")
         .takes_value(true))
    .arg(Arg::with_name("aws-bucket")
         .long("aws-bucket")
         .value_name("AWS_BUCKET")
         .help("S3 Bucket to upload to")
         .takes_value(true))
    .arg(Arg::with_name("verbose")
         .long("verbose")
         .help("Enables verbose logging"))
}
